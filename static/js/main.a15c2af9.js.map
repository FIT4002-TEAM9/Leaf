{"version":3,"file":"static/js/main.a15c2af9.js","mappings":"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","sources":["src/components/core/styles/typography/LeafFont.ts","src/components/core/styles/LeafDimensions.ts","src/components/core/views/LeafText/LeafText.tsx","src/language/errors/UnreachableCaseError.ts","src/components/core/styles/typography/LeafFontFamilyConfig.ts","src/components/core/styles/typography/LeafFontFamily.ts","src/components/core/styles/typography/LeafTypographyConfig.ts","src/language/errors/AssertionError.ts","src/language/assertions/Assert.ts","src/state/environment/ColorScheme.ts","src/state/environment/OS.ts","src/state/environment/ScreenType.ts","src/state/environment/Environment.ts","src/components/core/styles/color/LeafColor.ts","src/components/core/styles/LeafColors.ts","src/components/core/styles/LeafTypography.ts","src/components/core/views/LeafTextInput/LeafTextInput.tsx","src/components/core/views/LeafButton/LeafButton.tsx","src/components/core/views/LeafButton/LeafButtonType.ts","src/localisation/Strings.ts","src/localisation/locales/en.ts","src/state/LeafPublisher.ts","src/state/LeafValuePublisher.ts","src/state/LoginStatus.ts","src/state/StateManager.ts","src/components/login/LoginScreen.tsx","src/components/leader/LeaderScreen.tsx","src/components/worker/WorkerScreen.tsx","src/components/admin/AdminScreen.tsx","src/components/MainScreen.tsx","App.tsx","webpack/bootstrap","webpack/runtime/chunk loaded","webpack/runtime/compat get default export","webpack/runtime/define property getters","webpack/runtime/global","webpack/runtime/hasOwnProperty shorthand","webpack/runtime/make namespace object","webpack/runtime/node module decorator","webpack/runtime/publicPath","webpack/runtime/jsonp chunk loading","webpack/startup"],"sourcesContent":["\nexport enum LeafFont {\n    gilroyExtraBold = 'Gilroy-ExtraBold',\n    poppinsMedium = 'Poppins-Medium',\n    poppinsBold = 'Poppins-Bold',\n    poppinsMediumItalic = 'Poppins-MediumItalic',\n    poppinsBoldItalic = 'Poppins-BoldItalic',\n}","\nclass LeafDimensions {\n\n    static readonly screenPadding = 5;\n\n    static readonly screenSpacing = 4;\n\n}\n\nexport default LeafDimensions;","import React from 'react';\nimport { Text } from 'react-native-paper';\nimport { TextStyle } from 'react-native';\nimport LeafTypographyConfig from '../../styles/typography/LeafTypographyConfig';\n\ninterface Props {\n    children; // No type - can be any element (allows text element embedding)\n    typography: LeafTypographyConfig;\n    style?: TextStyle;\n}\n\nconst LeafText: React.FC<Props> = ({ \n    children, \n    typography,\n    style,\n}) => {\n    return (\n        <Text\n            style={[\n                { width: \"100%\" },\n                typography.getStylesheet(),\n                style,\n            ]}\n        >\n            {children}\n        </Text>\n    );\n}\n\nexport default LeafText;","\n/**\n * Throw this error in the case where an area of code shouldn't be capable of being reached.\n * For instance, in the default block of a switch statement that should be exhaustively checking an enum.\n * \n * ```\n * switch (primaryColor) {\n *     case PrimaryColor.red:\n *         console.log(\"RED!\");\n *         break;\n *     case PrimaryColor.blue:\n *         console.log(\"BLUE!\");\n *         break;\n *     case PrimaryColor.yellow:\n *         console.log(\"YELLOW!\");\n *         break;\n *     case default:\n *         throw new UnreachableCaseError(primaryColor);\n * }\n * ```\n */\nexport class UnreachableCaseError extends Error {\n    constructor(val: never) {\n        super(`[UNREACHABLE CASE ERROR] Unreachable case '${JSON.stringify(val)}'`);\n    }\n}","import { LeafFont } from \"./LeafFont\";\n\nclass LeafFontFamilyConfig {\n\n    public readonly regular: LeafFont\n    public readonly bold: LeafFont\n    public readonly italic: LeafFont\n    public readonly boldItalic: LeafFont\n\n    constructor(\n        regular: LeafFont, \n        bold: LeafFont, \n        italic: LeafFont, \n        boldItalic: LeafFont\n    ) {\n        this.regular = regular;\n        this.bold = bold;\n        this.italic = italic;\n        this.boldItalic = boldItalic;\n    }\n\n    public getFont(isBold: boolean, isItalic: boolean): LeafFont {\n        if (!isBold && !isItalic) {\n            return this.regular;\n        } else if (isBold && !isItalic) {\n            return this.bold;\n        } else if (!isBold && isItalic) {\n            return this.italic;\n        } else {\n            return this.boldItalic;\n        }\n    }\n\n}\n\nexport default LeafFontFamilyConfig;","import { UnreachableCaseError } from \"../../../../language/errors/UnreachableCaseError\";\nimport { LeafFont } from \"./LeafFont\";\nimport LeafFontFamilyConfig from \"./LeafFontFamilyConfig\";\n\nexport enum LeafFontFamily {\n    gilroy,\n    poppins,\n}\n\nexport namespace LeafFontFamily {\n    export function getConfig(family: LeafFontFamily): LeafFontFamilyConfig {\n        switch (family) {\n            case LeafFontFamily.gilroy: \n                return new LeafFontFamilyConfig(\n                    LeafFont.gilroyExtraBold,\n                    LeafFont.gilroyExtraBold,\n                    LeafFont.gilroyExtraBold,\n                    LeafFont.gilroyExtraBold\n                );\n            case LeafFontFamily.poppins:\n                return new LeafFontFamilyConfig(\n                    LeafFont.poppinsMedium, \n                    LeafFont.poppinsBold, \n                    LeafFont.poppinsMediumItalic, \n                    LeafFont.poppinsBoldItalic\n                );\n            default: \n                throw new UnreachableCaseError(family);\n        }\n    }\n}","import LeafColor from \"../color/LeafColor\";\nimport { LeafFontFamily } from \"./LeafFontFamily\";\nimport LeafFontFamilyConfig from \"./LeafFontFamilyConfig\";\nimport { StyleSheet } from 'react-native';\n\nclass LeafTypographyConfig {\n\n    public size: number;\n    public fontFamily: LeafFontFamily;\n    // An undefined color allows the component handle the color\n    public presetColor: LeafColor | undefined;\n    public bold: boolean;\n    public italic: boolean;\n    public underlined: boolean;\n    public linedOut: boolean;\n    get font(): string {\n        let config: LeafFontFamilyConfig = LeafFontFamily.getConfig(this.fontFamily);\n        return config.getFont(this.bold, this.italic);\n    }\n    get color(): string | undefined {\n        return this.presetColor?.getColor();\n    }\n    get lineStyle(): \"none\" | \"underline\" | \"line-through\" | \"underline line-through\" {\n        let result = \"\";\n        if (!this.underlined && !this.linedOut) {\n            result = \"none\";\n        } else {\n            if (this.underlined) {\n                result = \"underline\";\n            }\n            if (this.linedOut) {\n                result = (result + \" line-through\").trimStart();\n            }\n        }\n        return (result as \"none\" | \"underline\" | \"line-through\" | \"underline line-through\");\n    }\n\n    constructor(\n        size: number, \n        fontFamily: LeafFontFamily, \n        color: LeafColor | undefined,\n        bold: boolean = false, \n        italic: boolean = false, \n        underlined: boolean = false,\n        linedOut: boolean = false\n    ) {\n        this.size = size;\n        this.fontFamily = fontFamily;\n        this.presetColor = color;\n        this.bold = bold;\n        this.italic = italic;\n        this.underlined = underlined;\n        this.linedOut = linedOut;\n    }\n\n    public getStylesheet(): {} {\n        return StyleSheet.create({\n            typography: {\n                fontFamily: this.font,\n                color: this.color,\n                fontSize: this.size,\n                textDecorationLine: this.lineStyle,\n            }\n        }).typography;\n    }\n\n}\n\nexport default LeafTypographyConfig;","\n/**\n * To be thrown in assertion statements\n * Refer to Assert.ts and AssertionFailure.ts\n */\nexport class AssertionError extends Error {\n    constructor(message: string) {\n        super(`[ASSERTION ERROR] ${message}`);\n    }\n}","import { AssertionError } from \"../errors/AssertionError\";\n\n/**\n * Performs an assertion for debugging at runtime\n * \n * @param condition The condition to be tested\n * @param message The message to output if the condition fails\n */\nexport function assert(condition: boolean, message: string) {\n    if (!condition) { \n        throw new AssertionError(message);\n    }\n}","import { UnreachableCaseError } from \"../../language/errors/UnreachableCaseError\";\n\nexport enum ColorScheme {\n    dark,\n    light\n}\n\nexport namespace ColorScheme {\n    export function toString(scheme: ColorScheme): string {\n        switch (scheme) {\n            case ColorScheme.dark:\n                return \"Dark Mode\"\n            case ColorScheme.light:\n                return \"Light Mode\"\n            default: \n                throw new UnreachableCaseError(scheme);\n        }\n    }\n}","import { UnreachableCaseError } from \"../../language/errors/UnreachableCaseError\";\n\nexport enum OS {\n    ios,\n    android,\n    web,\n    windows,\n    macos,\n    other\n}\n\nexport namespace OS {\n    export function toString(os: OS): string {\n        switch (os) {\n            case OS.ios: \n                return \"iOS\";\n            case OS.android: \n                return \"Android\";\n            case OS.windows: \n                return \"Windows\";\n            case OS.macos: \n                return \"macOS\";\n            case OS.web: \n                return \"Web\";\n            case OS.other: \n                return \"Unknown\";\n            default: \n                throw new UnreachableCaseError(os);\n        }\n    }\n}","import { UnreachableCaseError } from \"../../language/errors/UnreachableCaseError\";\n\nexport enum ScreenType {\n    mobile,\n    large\n}\n\nexport namespace ScreenType {\n    export function toString(screenType: ScreenType): string {\n        switch (screenType) {\n            case ScreenType.mobile:\n                return \"Mobile\";\n            case ScreenType.large:\n                return \"Large\";\n            default:\n                throw new UnreachableCaseError(screenType);\n        }\n    }\n}","import { Appearance, Dimensions, PlatformIOSStatic } from \"react-native\"\nimport { Platform } from 'react-native';\nimport { UnreachableCaseError } from \"../../language/errors/UnreachableCaseError\";\nimport { OS } from \"./OS\";\nimport { ScreenType } from \"./ScreenType\";\nimport { ColorScheme } from \"./ColorScheme\";\n\nclass Environment {\n\n    public static readonly instance = new Environment()\n\n    private constructor() { }\n\n    public getColorScheme(): ColorScheme {\n        // TODO: I can't get this to change correctly\n        const colorScheme = Appearance.getColorScheme();\n        switch (colorScheme) {\n            case 'dark':\n                return ColorScheme.dark;\n            case 'light':\n                return ColorScheme.light;\n            default:\n                return ColorScheme.light;\n        }\n    }\n\n    public getOS(): OS {\n        switch (Platform.OS) {\n            case 'android':\n                return OS.android;\n            case 'ios':\n                return OS.ios;\n            case 'windows':\n                return OS.windows;\n            case 'macos':\n                return OS.macos;\n            case 'web':\n                return OS.web;\n            default:\n                return OS.other;\n        }\n    }\n\n    public getScreenType(): ScreenType {\n        const os = this.getOS();\n        switch (os) {\n            case OS.ios:\n                return (Platform as PlatformIOSStatic).isPad ? ScreenType.large : ScreenType.mobile;\n            case OS.android:\n                // TODO: Figure out how to detect Android tablets\n                return ScreenType.mobile;\n            case OS.windows:\n            case OS.macos:\n                return ScreenType.large;\n            case OS.web:\n            case OS.other:\n                const dimensions = this.getScreenDimensions();\n                if (dimensions[1] > dimensions[0]) {\n                    // Height > width, assume mobile\n                    return ScreenType.mobile;\n                }\n                // Any landscape screen on a web client can be assumed to be on a large screen\n                return ScreenType.large;\n            default:\n                throw new UnreachableCaseError(os);\n        }\n    }\n\n    private getScreenDimensions(): [number, number] {\n        return [\n            Dimensions.get(\"window\").width,\n            Dimensions.get(\"window\").height\n        ]\n    }\n\n}\n\nexport default Environment;","import { assert } from \"../../../../language/assertions/Assert\";\nimport { UnreachableCaseError } from \"../../../../language/errors/UnreachableCaseError\";\nimport { ColorScheme } from \"../../../../state/environment/ColorScheme\";\nimport Environment from \"../../../../state/environment/Environment\";\n\nclass LeafColor {\n\n    private readonly lightMode: string;\n    private readonly darkMode: string;\n\n    constructor(lightMode: string, darkMode?: string) {\n        const cssColorRegex = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$|^rgba?\\([^\\)]+\\)$|^hsla?\\([^\\)]+\\)$|^[\\w]+$/;\n        // If no dark mode is provided, dark mode / light mode is equivalent\n        let setDarkMode = darkMode || lightMode;\n        assert(cssColorRegex.test(lightMode), `Invalid lightMode color string provided: '${lightMode}'`);\n        assert(cssColorRegex.test(setDarkMode), `Invalid darkMode color string provided: '${setDarkMode}'`);\n        this.lightMode = lightMode;\n        this.darkMode = setDarkMode;\n    }\n\n    /**\n     * Gets the color based on the user's active color scheme (light mode / dark mode)\n     * \n     * @returns Validated color string\n     */\n    public getColor(): string {\n        let colorScheme: ColorScheme = Environment.instance.getColorScheme();\n        switch (colorScheme) {\n            case ColorScheme.dark:\n                return this.darkMode;\n            case ColorScheme.light:\n                return this.lightMode;\n            default:\n                throw new UnreachableCaseError(colorScheme);\n        }\n    }\n\n}\n\nexport default LeafColor;","import LeafColor from \"./color/LeafColor\";\n\n/**\n * Predefined colors to be used application-wide.\n * Colors are all defined with a light-mode and dark-mode variant.\n * Colors should be named using light-mode convention, that is, colors should be named according to how they should be read in light mode. \"Dark text\" is text that is dark in light mode, and light in dark mode.\n */\nclass LeafColors {\n\n    // Palette\n\n    static get accent(): LeafColor {\n        return new LeafColor(\"#51b962\");\n    }\n\n    static get lightAccent(): LeafColor {\n        return new LeafColor(\"#e8f9e9\");\n    }\n\n    // Text\n\n    static get textDark(): LeafColor {\n        return new LeafColor(\"#212529\", \"#f8f9fa\");\n    }\n\n    static get textLight(): LeafColor {\n        return new LeafColor(\"#f8f9fa\", \"#212529\");\n    }\n\n    // Backgrounds\n\n    static get textBackgroundDark(): LeafColor {\n        return new LeafColor(\"#ececec\");\n    }\n\n    static get textBackgroundLight(): LeafColor {\n        return new LeafColor(\"#fefbfe\");\n    }\n\n}\n\nexport default LeafColors;","import { LeafFontFamily } from \"./typography/LeafFontFamily\";\nimport LeafTypographyConfig from \"./typography/LeafTypographyConfig\";\nimport LeafColors from \"./LeafColors\";\n\nclass LeafTypography {\n\n    static get display(): LeafTypographyConfig {\n        return new LeafTypographyConfig(\n            70,\n            LeafFontFamily.gilroy,\n            LeafColors.textDark,\n        );\n    }\n\n    static get body(): LeafTypographyConfig {\n        return new LeafTypographyConfig(\n            15,\n            LeafFontFamily.poppins,\n            LeafColors.textDark,\n        );\n    }\n\n    static get primaryButton(): LeafTypographyConfig {\n        return new LeafTypographyConfig(\n            18,\n            LeafFontFamily.poppins,\n            LeafColors.textLight,\n            true,\n        );\n    }\n\n}\n\nexport default LeafTypography;","import React from 'react';\nimport { TextInput } from 'react-native-paper';\nimport { ViewStyle } from 'react-native';\nimport LeafColor from '../../styles/color/LeafColor';\n\ninterface Props {\n    label: string;\n    textColor: LeafColor;\n    color: LeafColor;\n    style?: ViewStyle;\n    onTextChange: (text: string) => void;\n}\n\nconst LeafTextInput: React.FC<Props> = ({ \n    label, \n    textColor,\n    color,\n    style,\n    onTextChange,\n}) => {\n    const [text, setText] = React.useState(\"\");\n\n    return (\n        <TextInput\n            label={label}\n            value={text}\n            mode=\"outlined\"\n            style={[\n                style,\n                { \n                    borderRadius: 30, \n                    width: \"100%\", \n                    backgroundColor: color.getColor() \n                },\n            ]}\n            outlineColor=\"transparent\" \n            theme={{ colors: { primary: textColor.getColor() } }}\n            outlineStyle={{ borderRadius: 12 }}\n            onChangeText={text => {\n                setText(text)\n                onTextChange(text);\n            }}\n        />\n    );\n}\n\nexport default LeafTextInput;","import React from 'react';\nimport { Button } from 'react-native-paper';\nimport { LeafButtonType } from './LeafButtonType';\nimport LeafText from '../LeafText/LeafText';\nimport Environment from '../../../../state/environment/Environment';\nimport { OS } from '../../../../state/environment/OS';\nimport { ViewStyle } from 'react-native';\nimport LeafTypographyConfig from '../../styles/typography/LeafTypographyConfig';\nimport LeafColor from '../../styles/color/LeafColor';\nimport Icon from 'react-native-vector-icons/MaterialCommunityIcons';\n\ninterface Props {\n    label: string;\n    type: LeafButtonType;\n    typography: LeafTypographyConfig;\n    color: LeafColor;\n    icon?: string; // https://pictogrammers.com/library/mdi/\n    disabled?: boolean;\n    style?: ViewStyle;\n    onPress: () => void;\n}\n\nconst LeafButton: React.FC<Props> = ({ \n    label, \n    type, \n    typography,\n    color,\n    icon = null, \n    disabled = false, \n    style,\n    onPress,\n}) => {\n    // TODO: Figure out a better way to centre the text\n    let os: OS = Environment.instance.getOS();\n    let labelStyle = {}\n    if (os != OS.web) {\n        labelStyle = { lineHeight: 0 } // Centres the text\n    }\n\n    if (disabled) {\n        // Override colour when disabled\n        typography.presetColor = undefined;\n    }\n    \n    return (\n        <Button \n            icon={({ size, color }) => (\n                <Icon name={icon} size={size + 8} color={color} />\n            )}\n            mode={type} \n            onPress={onPress}\n            disabled={disabled}\n            labelStyle={[\n                { padding: 2 },\n                labelStyle,\n            ]}\n            style={[\n                style,\n                { \n                    borderRadius: 50, \n                    width: \"100%\"\n                },\n            ]}\n            buttonColor={color.getColor()}\n        >\n            <LeafText typography={typography}>\n                {label}\n            </LeafText>\n        </Button>\n    );\n}\n\nexport default LeafButton;","\nexport enum LeafButtonType {\n    filled = \"contained\",\n    outlined = \"outlined\"\n}","import * as Localization from 'expo-localization';\nimport en from './locales/en';\nimport { assert } from '../language/assertions/Assert';\n\n// Right now we only support detecting localisation\n// Some day if we want to dynamically change the language in-app, we'll have to adjust the architecture\nconst locales = { en, }; // We only support English right now\nconst language = Localization.locale.split('-')[0];\nconst locale = locales[language] || locales.en;\n\n/**\n * Retrieves a localised string using its key\n * \n * @param path The key to the string\n * @param interpolations Strings to insert to {0}, {1}, etc.\n * @returns The translated string\n */\nexport function strings(path: string, ...interpolations: string[]): string {\n    let localisedString = locale[path];\n    assert(localisedString != undefined, `Invalid string path provided: ${path}`);\n    return (localisedString as string).replace(/{(\\d+)}/g, function(match, number) { \n        return typeof interpolations[number] != 'undefined' ? interpolations[number] : match;\n    });\n}","\n/**\n * English strings.\n * \n * For the formatting convention, refer to my (Andre Pham's) repo:\n * https://github.com/Andre-Pham/yonder/blob/main/codebase/yonder/yonder/Strings/en.lproj/Localizable.strings\n * \n * For providing parameters, insert {0}, {1}, ..., {n} into the string.\n */\nexport default {\n\n    // Main\n    \"appName\": \"TODO\",\n\n    // Buttons\n    \"button.login\": \"Login\",\n    \"button.logout\": \"Logot\",\n    \"button.done\": \"Done\",\n    \"button.cancel\": \"Cancel\",\n\n    // Login\n    \"login.title\": \"Login\",\n    \"login.inputLabel.username\": \"Username\",\n    \"login.inputLabel.password\": \"Password\",\n\n}","import { configureStore, createSlice } from \"@reduxjs/toolkit\";\n\n/**\n * A redux wrapper for managing application-wide state using the publisher-subscriber pattern.\n * To only be initialised within StateManager.\n */\nclass LeafPublisher {\n\n    private readonly slice = createSlice({\n        name: 'LeafPublisher',\n        initialState: {\n            value: 0\n        },\n        reducers: {\n            newForm: state => {\n                state.value = (state.value + 1)%10;\n            }\n        }\n    })\n\n    private readonly publisher = configureStore({\n        reducer: this.slice.reducer\n    })\n\n    public subscribe(callback: () => void) {\n        this.publisher.subscribe(callback);\n    }\n\n    public publish() {\n        this.publisher.dispatch(this.slice.actions.newForm());\n    }\n\n}\n\nexport default LeafPublisher;","import { Draft, PayloadAction, configureStore, createSlice } from \"@reduxjs/toolkit\";\n\n/**\n * A redux wrapper for managing application-wide state using the publisher-subscriber pattern.\n * The class contains the state value (generic type) to be read.\n * To only be initialised within StateManager.\n */\nclass LeafValuePublisher<Type> {\n\n    private readonly slice;\n    private readonly publisher;\n\n    constructor(initialState: Type) {\n        this.slice = createSlice({\n            name: 'LeafValuePublisher',\n            initialState: {\n                value: initialState\n            },\n            reducers: {\n                publishAction: (state, newValue: PayloadAction<Draft<Type>>) => {\n                    state.value = newValue.payload;\n                }\n            }\n        });\n        \n        this.publisher = configureStore({\n            reducer: this.slice.reducer\n        });\n    }\n\n    public subscribe(callback: () => void) {\n        this.publisher.subscribe(callback);\n    }\n\n    public publish(value: Type) {\n        this.publisher.dispatch(this.slice.actions.publishAction(value));\n    }\n\n    public read(): Type {\n        return this.publisher.getState().value;\n    }\n\n}\n\nexport default LeafValuePublisher;","\nexport enum LoginStatus {\n    worker,\n    leader,\n    admin,\n    loggedOut,\n}","import LeafPublisher from \"./LeafPublisher\";\nimport LeafValuePublisher from \"./LeafValuePublisher\"\nimport { LoginStatus } from \"./LoginStatus\";\n\nclass StateManager {\n\n    /**\n     * THIS IS A DEMO PROPERTY\n     */\n    public static readonly formSubmitted = new LeafPublisher();\n\n    public static readonly loginStatus = new LeafValuePublisher(LoginStatus.loggedOut);\n\n}\n\nexport default StateManager;","import { Box, Spacer, VStack, View } from \"native-base\";\nimport React from \"react\";\nimport LeafText from \"../core/views/LeafText/LeafText\";\nimport LeafTypography from \"../core/styles/LeafTypography\";\nimport LeafTextInput from \"../core/views/LeafTextInput/LeafTextInput\";\nimport LeafDimensions from \"../core/styles/LeafDimensions\";\nimport LeafButton from \"../core/views/LeafButton/LeafButton\";\nimport { LeafButtonType } from \"../core/views/LeafButton/LeafButtonType\";\nimport LeafColors from \"../core/styles/LeafColors\";\nimport { strings } from \"../../localisation/Strings\";\nimport StateManager from \"../../state/StateManager\";\nimport { LoginStatus } from \"../../state/LoginStatus\";\n\nconst LoginScreen: React.FC = () => {\n    const [username, setUsername] = React.useState(\"\");\n    const [password, setPassword] = React.useState(\"\");\n\n    const onUsernameInput = (text) => {\n        setUsername(text);\n    }\n\n    const onPasswordInput = (text) => {\n        setPassword(text);\n    }\n\n    const onLoginPressed = () => {\n        // TODO: Obviously this entire thing will be reworked in time\n        switch (username.toLowerCase()) {\n            case \"worker\":\n            case \"w\":\n                StateManager.loginStatus.publish(LoginStatus.worker);\n                break;\n            case \"leader\":\n            case \"l\":\n                StateManager.loginStatus.publish(LoginStatus.leader);\n                break;\n            case \"admin\":\n            case \"a\":\n                StateManager.loginStatus.publish(LoginStatus.admin);\n                break;\n        }\n    }\n\n    return (\n        <VStack style={{ flex: 1 }} space={LeafDimensions.screenSpacing} alignItems={\"center\"} width={\"100%\"}>\n            <Spacer/>\n\n            <LeafText \n                typography={LeafTypography.display} \n                style={{ textAlign: 'center', paddingBottom: 20 }}\n            >\n                {strings(\"login.title\")}\n            </LeafText>\n\n            <Box maxWidth={\"400px\"} alignItems={\"center\"} width={\"100%\"}>\n                <LeafTextInput\n                    label={strings(\"login.inputLabel.username\")}\n                    textColor={LeafColors.textDark}\n                    color={LeafColors.textBackgroundDark}\n                    onTextChange={onUsernameInput}\n                />\n\n                <Spacer size={2} />\n\n                <LeafTextInput\n                    label={strings(\"login.inputLabel.password\")}\n                    textColor={LeafColors.textDark}\n                    color={LeafColors.textBackgroundDark}\n                    onTextChange={onPasswordInput}\n                />\n\n                <LeafButton \n                    label={strings(\"button.login\")}\n                    icon=\"arrow-right-circle\"\n                    typography={LeafTypography.primaryButton}\n                    type={LeafButtonType.filled} \n                    color={LeafColors.accent}\n                    style={{ marginTop: 40 }}\n                    onPress={onLoginPressed}\n                />\n            </Box>\n\n            <Spacer />\n            \n            <Spacer />\n\n            <Spacer />\n\n            {/* TODO: Remove later */}\n            <LeafText typography={LeafTypography.body} >\n                {'TEMP: For now, just login using \"W\"/\"Worker\", \"L\"/\"Leader\" or \"A\"/\"Admin\" as the username.'}\n            </LeafText>\n        </VStack>\n    );\n}\n\nexport default LoginScreen;","import { Spacer, VStack } from \"native-base\";\nimport React from \"react\";\nimport LeafText from \"../core/views/LeafText/LeafText\";\nimport LeafTypography from \"../core/styles/LeafTypography\";\nimport LeafDimensions from \"../core/styles/LeafDimensions\";\nimport LeafButton from \"../core/views/LeafButton/LeafButton\";\nimport { LeafButtonType } from \"../core/views/LeafButton/LeafButtonType\";\nimport LeafColors from \"../core/styles/LeafColors\";\nimport StateManager from \"../../state/StateManager\";\nimport { LoginStatus } from \"../../state/LoginStatus\";\n\nconst LeaderScreen: React.FC = () => {\n    return (\n        <VStack style={{ flex: 1 }} space={LeafDimensions.screenSpacing}>\n            <Spacer/>\n\n            <LeafText\n                typography={LeafTypography.body}\n                style={{ textAlign: 'center' }}\n            >\n                TODO: Leader Screen\n            </LeafText>\n\n            <LeafButton \n                label=\"Logout (TEMP)\"\n                icon=\"arrow-left-circle\"\n                typography={LeafTypography.primaryButton}\n                type={LeafButtonType.filled} \n                color={LeafColors.accent}\n                onPress={() => {\n                    StateManager.loginStatus.publish(LoginStatus.loggedOut);\n                }}\n            />\n\n            <Spacer />\n        </VStack>\n    );\n}\n\nexport default LeaderScreen;","import { Spacer, VStack } from \"native-base\";\nimport React from \"react\";\nimport LeafText from \"../core/views/LeafText/LeafText\";\nimport LeafTypography from \"../core/styles/LeafTypography\";\nimport LeafDimensions from \"../core/styles/LeafDimensions\";\nimport LeafButton from \"../core/views/LeafButton/LeafButton\";\nimport { LeafButtonType } from \"../core/views/LeafButton/LeafButtonType\";\nimport LeafColors from \"../core/styles/LeafColors\";\nimport StateManager from \"../../state/StateManager\";\nimport { LoginStatus } from \"../../state/LoginStatus\";\n\nconst WorkerScreen: React.FC = () => {\n    return (\n        <VStack style={{ flex: 1 }} space={LeafDimensions.screenSpacing}>\n            <Spacer/>\n\n            <LeafText\n                typography={LeafTypography.body}\n                style={{ textAlign: 'center' }}\n            >\n                TODO: Worker Screen\n            </LeafText>\n\n            <LeafButton \n                label=\"Logout (TEMP)\"\n                icon=\"arrow-left-circle\"\n                typography={LeafTypography.primaryButton}\n                type={LeafButtonType.filled} \n                color={LeafColors.accent}\n                onPress={() => {\n                    StateManager.loginStatus.publish(LoginStatus.loggedOut);\n                }}\n            />\n\n            <Spacer />\n        </VStack>\n    );\n}\n\nexport default WorkerScreen;","import { Spacer, VStack } from \"native-base\";\nimport React from \"react\";\nimport LeafText from \"../core/views/LeafText/LeafText\";\nimport LeafTypography from \"../core/styles/LeafTypography\";\nimport LeafDimensions from \"../core/styles/LeafDimensions\";\nimport LeafButton from \"../core/views/LeafButton/LeafButton\";\nimport { LeafButtonType } from \"../core/views/LeafButton/LeafButtonType\";\nimport LeafColors from \"../core/styles/LeafColors\";\nimport StateManager from \"../../state/StateManager\";\nimport { LoginStatus } from \"../../state/LoginStatus\";\n\nconst AdminScreen: React.FC = () => {\n    return (\n        <VStack style={{ flex: 1 }} space={LeafDimensions.screenSpacing}>\n            <Spacer/>\n\n            <LeafText\n                typography={LeafTypography.body}\n                style={{ textAlign: 'center' }}\n            >\n                TODO: Admin Screen\n            </LeafText>\n\n            <LeafButton \n                label=\"Logout (TEMP)\"\n                icon=\"arrow-left-circle\"\n                typography={LeafTypography.primaryButton}\n                type={LeafButtonType.filled} \n                color={LeafColors.accent}\n                onPress={() => {\n                    StateManager.loginStatus.publish(LoginStatus.loggedOut);\n                }}\n            />\n\n            <Spacer />\n        </VStack>\n    );\n}\n\nexport default AdminScreen;","import React from \"react\";\nimport LoginScreen from \"./login/LoginScreen\";\nimport LeaderScreen from \"./leader/LeaderScreen\";\nimport StateManager from \"../state/StateManager\";\nimport { LoginStatus } from \"../state/LoginStatus\";\nimport { UnreachableCaseError } from \"../language/errors/UnreachableCaseError\";\nimport WorkerScreen from \"./worker/WorkerScreen\";\nimport AdminScreen from \"./admin/AdminScreen\";\n\nconst MainScreen: React.FC = () => {\n    const [loginStatus, setLoginStatus] = React.useState(StateManager.loginStatus.read());\n\n    StateManager.loginStatus.subscribe(() => {\n        setLoginStatus(StateManager.loginStatus.read());\n    });\n\n    switch (loginStatus) {\n        case LoginStatus.loggedOut:\n            return <LoginScreen />\n        case LoginStatus.worker:\n            return <WorkerScreen />\n        case LoginStatus.leader:\n            return <LeaderScreen />\n        case LoginStatus.admin:\n            return <AdminScreen />\n        default:\n            throw new UnreachableCaseError(loginStatus);\n    }\n}\n\nexport default MainScreen;","import { DefaultTheme, Provider as PaperProvider, Text, TextInput } from 'react-native-paper';\nimport { Flex, NativeBaseProvider, VStack } from 'native-base';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { useFonts } from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport { useCallback } from 'react';\nimport { View } from 'react-native';\nimport { LeafFont } from './src/components/core/styles/typography/LeafFont';\nimport LeafDimensions from './src/components/core/styles/LeafDimensions';\nimport MainScreen from './src/components/MainScreen';\n\nSplashScreen.preventAutoHideAsync();\n\nexport default function App() {\n  const [fontsLoaded] = useFonts({\n    [LeafFont.gilroyExtraBold]: require('./assets/fonts/Gilroy-ExtraBold.otf'),\n    [LeafFont.poppinsMedium]: require('./assets/fonts/Poppins-Medium.ttf'),\n    [LeafFont.poppinsBold]: require('./assets/fonts/Poppins-Bold.ttf'),\n    [LeafFont.poppinsMediumItalic]: require('./assets/fonts/Poppins-MediumItalic.ttf'),\n    [LeafFont.poppinsBoldItalic]: require('./assets/fonts/Poppins-BoldItalic.ttf'),\n  });\n\n  const onLayoutRootView = useCallback(async () => {\n    if (fontsLoaded) {\n      await SplashScreen.hideAsync();\n    }\n  }, [fontsLoaded]);\n\n  if (!fontsLoaded) {\n    return null;\n  }\n  \n  return (\n    <NativeBaseProvider>\n      <PaperProvider theme={theme}>\n        <View onLayout={onLayoutRootView} style={{ flex: 1 }}>\n          <SafeAreaView style={{ flex: 1 }}>\n            <Flex padding={LeafDimensions.screenPadding} flex={1}>\n              <MainScreen />\n            </Flex>\n          </SafeAreaView>\n        </View>\n      </PaperProvider>\n    </NativeBaseProvider>\n  );\n}\n\nconst theme = {\n  ...DefaultTheme,\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"/Leaf/\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkweb\"] = self[\"webpackChunkweb\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [448], () => (__webpack_require__(9484)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["LeafFont","LeafDimensions","_createClass","_classCallCheck","screenPadding","screenSpacing","_ref","children","typography","style","_jsx","Text","width","getStylesheet","UnreachableCaseError","_Error","_inherits","_super","_createSuper","val","call","JSON","stringify","_wrapNativeSuper","Error","LeafFontFamilyConfig","regular","bold","italic","boldItalic","this","key","value","isBold","isItalic","LeafFontFamily","getConfig","family","gilroy","gilroyExtraBold","poppins","poppinsMedium","poppinsBold","poppinsMediumItalic","poppinsBoldItalic","LeafTypographyConfig","size","fontFamily","color","arguments","length","undefined","underlined","linedOut","presetColor","get","getFont","_this$presetColor","getColor","result","trimStart","StyleSheet","font","fontSize","textDecorationLine","lineStyle","AssertionError","message","assert","condition","ColorScheme","toString","scheme","dark","light","OS","os","ios","android","windows","macos","web","other","ScreenType","screenType","mobile","large","Environment","Appearance","Platform","getOS","dimensions","getScreenDimensions","Dimensions","height","instance","LeafColor","lightMode","darkMode","cssColorRegex","setDarkMode","test","colorScheme","LeafColors","LeafTypography","label","textColor","onTextChange","_React$useState","React","_React$useState2","_slicedToArray","text","setText","TextInput","mode","borderRadius","backgroundColor","outlineColor","theme","colors","primary","outlineStyle","onChangeText","type","_ref$icon","icon","_ref$disabled","disabled","onPress","labelStyle","lineHeight","Button","_ref2","Icon","name","padding","buttonColor","LeafText","LeafButtonType","locales","en","locale","split","strings","path","_len","interpolations","Array","_key","localisedString","replace","match","number","LeafPublisher","slice","createSlice","initialState","reducers","newForm","state","publisher","configureStore","reducer","callback","subscribe","dispatch","actions","LeafValuePublisher","publishAction","newValue","payload","getState","LoginStatus","StateManager","formSubmitted","loginStatus","loggedOut","username","setUsername","_React$useState3","_React$useState4","setPassword","_jsxs","VStack","flex","space","alignItems","Spacer","textAlign","paddingBottom","Box","maxWidth","LeafTextInput","LeafButton","filled","marginTop","toLowerCase","worker","leader","admin","setLoginStatus","LoginScreen","WorkerScreen","LeaderScreen","AdminScreen","App","_useFonts3","_useFonts","useFonts","_defineProperty","require","fontsLoaded","onLayoutRootView","useCallback","_asyncToGenerator","SplashScreen","NativeBaseProvider","PaperProvider","View","onLayout","SafeAreaView","Flex","MainScreen","_objectSpread","DefaultTheme","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","id","loaded","__webpack_modules__","m","deferred","O","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","Object","keys","every","splice","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","g","globalThis","Function","e","window","obj","prop","prototype","hasOwnProperty","Symbol","toStringTag","nmd","paths","p","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","chunkLoadingGlobal","self","forEach","bind","push","__webpack_exports__"],"sourceRoot":""}